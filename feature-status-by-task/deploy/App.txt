<!DOCTYPE html>
<html>
<head>
    <title>Feature Status by Task</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Sun Jan 29 2017 13:57:17 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Jan 29 2017 13:57:17 GMT-0800 (PST)";
        var BUILDER = "jmartin";
        var CHECKSUM = 146811950331;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.FeatureTaskStore',{
    logger: new Rally.technicalservices.Logger(),
    MAX_CHUNK_SIZE: 425,
    MAX_THREADS: 10,
    TASK_STATES: ['Defined','In-Progress','Completed'],

    mixins: {
        observable: 'Ext.util.Observable'
    },
    
    loadTasks: function(records, taskOwners, storyOids){
        var featureObjectIDs = _.map(records, function(r){ return r.get('ObjectID'); });
        return this.fetchTaskChunks(featureObjectIDs);
    },
    
    collectTasks: function(featureRecords, taskRecords) {
        var featureObjectIDs = _.map(featureRecords, function(r){ return r.get('ObjectID'); });

        this.logger.log('success inside collectTasks: taskRecords.length', taskRecords.length);
        
        var snapsByOid = this._getSnapsByOid(taskRecords, featureObjectIDs);
        this.logger.log('success inside collectTasks -- after snapsByOid');
        
        taskRecords = null;
        
        for (var i=0; i < featureRecords.length; i++){
            featureRecords[i].addTasks(snapsByOid[featureRecords[i].get('ObjectID') || [] ]);
        }
        
        return featureRecords;
    },

    load: function(records, storyFilters, taskOwners){
        var deferred = Ext.create('Deft.Deferred');

        var featureObjectIDs = _.map(records, function(r){ return r.get('ObjectID'); });
        if (storyFilters){
            this.fetchStories(featureObjectIDs, storyFilters).then({
                success: function(storyIDs){

                    this.fetchTaskChunks(storyIDs, taskOwners).then({
                        success: function(taskRecords){
                            var totals = this.calculateTaskRollups(taskRecords, records, featureObjectIDs);
                            deferred.resolve(totals);
                        },
                        failure: function(msg){
                            this.logger.log('load.fetchStories.fetchTaskChunks FAILURE', msg);
                            deferred.reject(msg);
                        },
                        scope: this
                    });
                },
                failure: function(msg){
                    this.logger.log('load.fetchStories FAILURE', msg);
                    deferred.reject(msg);
                },
                scope: this
            });
        } else {

            this.fetchTaskChunks(featureObjectIDs, taskOwners).then({
                success: function(taskRecords){
                    Rally.getApp().setLoading("Calculating Rollups...");
                    var totals = this.calculateTaskRollups(taskRecords, records, featureObjectIDs);
                    Rally.getApp().setLoading(false);
                    deferred.resolve(totals);
                },
                failure: function(msg){
                    this.logger.log('load.fetchTaskChunks FAILURE', msg);
                    deferred.reject(msg);
                },
                scope: this
            });
        }
        return deferred;
    },
    fetchTaskChunks: function(ancestorObjectIDs, taskOwners, storyOids){
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        var promises = [];
        var chunk_size = ancestorObjectIDs.length / this.MAX_THREADS;
        
        Ext.Array.each(_.range(0,this.MAX_THREADS), function(page_index){
            var start = page_index * chunk_size;
            var chunk = Ext.Array.slice(ancestorObjectIDs, start, start + chunk_size);
            promises.push(function() { 
                return me._fetchLBAPIChunk(chunk, taskOwners, storyOids); 
            });
        });
        
        //        var chunk_size = this.MAX_CHUNK_SIZE;
//        for (var i=0; i < ancestorObjectIDs.length; i = i+chunk_size){
//            var chunk = Ext.clone( Ext.Array.slice(ancestorObjectIDs, i, i + chunk_size) );
//            promises.push(function() { 
//                return me._fetchLBAPIChunk(chunk, taskOwners, storyOids); 
//            });
//        }

        //Deft.Promise.all(promises).then({
        Deft.Chain.parallel(promises,this).then({
            success: function(results){
                var records = _.flatten(results);
                results = null;
                deferred.resolve(records);
            },
            failure: function(msg){
                this.logger.log('fetchTaskChunks FAILURE', ancestorObjectIDs, taskOwners, msg);
                deferred.reject(msg);
            },
            scope: this
        });
        return deferred;
    },
    fetchStories: function(featureObjectIDs, filters){
        var deferred = Ext.create('Deft.Deferred');
        //we are only interested in stories that have features
        filters = filters.and({
            property: 'Feature.ObjectID',
            operator: '>',
            value: 0
        });

        Ext.create('Rally.data.wsapi.Store',{
            model: 'HierarchicalRequirement',
            fetch: ['ObjectID','Feature'],
            filters: filters,
            limit: 'Infinity'
        }).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    //we only want stories associated with the features that we passed in so we will filter those out.
                    var storyIds = [];
                    for (var i=0; i<records.length; i++){
                        var featureID = records[i].get('Feature') && records[i].get('Feature').ObjectID;
                        if (Ext.Array.contains(featureObjectIDs, featureID)){
                            storyIds.push(records[i].get('ObjectID'));
                        }
                    }
                    deferred.resolve(storyIds);
                } else {
                    deferred.reject("Error fetching stories: " + operation && operation.error && operation.error.errors.join(','));
                }
            }
        });
        return deferred;
    },
    calculateTaskRollups: function(taskRecords, featureRecords, objectIDs){
        this.logger.log('calculateTaskRollups', taskRecords.length, featureRecords.length);
        
        var snapsByOid = this._getSnapsByOid(taskRecords, objectIDs),
            totalToDo = [0,0,0],
            totalEstimate = [0,0,0],
            totalCount = [0,0,0],
            rollupsByOid = {};

        Ext.Array.each(featureRecords, function(r){
            var snaps = snapsByOid[r.get('ObjectID')] || null;
                //rollup = this._calculateRollup(snaps);

            var rollup = null;
            if (snaps && snaps.length > 0){

                rollup = {
                    taskCount: [0,0,0],
                    taskEstimate: [0,0,0],
                    taskToDo: [0,0,0],
                    count: {},
                    estimate: {},
                    todo: {}
                };

                for (var i=0; i<snaps.length; i++){
                    var snap = snaps[i],
                        state = snap.State,
                        stateIdx = _.indexOf(this.TASK_STATES, state);

                    rollup.taskCount[stateIdx]++;
                    rollup.taskEstimate[stateIdx] += (snap.Estimate || 0);
                    rollup.taskToDo[stateIdx] += (snap.ToDo || 0);

                    if (!rollup.count[state]){
                        rollup.count[state] = 0;
                        rollup.estimate[state] = 0;
                        rollup.todo[state] = 0;
                    }

                    rollup.count[state]++;
                    rollup.estimate[state] += (snap.Estimate || 0);
                    rollup.todo[state] += (snap.ToDo || 0)
                }

                for (var i=0; i < this.TASK_STATES.length; i++){
                    totalToDo[i] += rollup.taskToDo[i];
                    totalEstimate[i] += rollup.taskEstimate[i];
                    totalCount[i]+= rollup.taskCount[i];
                }
            }

            rollupsByOid[r.get('ObjectID')] = rollup;
        }, this);

        var totals = {taskToDo: totalToDo, taskEstimate: totalEstimate, taskCount: totalCount};
        
        Ext.Array.each(featureRecords, function(r){
            var rollup = rollupsByOid[r.get('ObjectID')] || null;
            if (rollup){
                rollup.totals = totals;
            }
            r.set('rollup', rollup);
        });

        return totals;

    },
    _calculateRollup: function(snaps){

        var rollup = null;
        if (snaps && snaps.length > 0){

            rollup = {
                taskCount: [0,0,0],
                taskEstimate: [0,0,0],
                taskToDo: [0,0,0],
                count: {},
                estimate: {},
                todo: {}
            };

            for (var i=0; i<snaps.length; i++){
                var snap = snaps[i],
                    state = snap.State,
                    stateIdx = _.indexOf(this.TASK_STATES, state);

                rollup.taskCount[stateIdx]++;
                rollup.taskEstimate[stateIdx] += (snap.Estimate || 0);
                rollup.taskToDo[stateIdx] += (snap.ToDo || 0)

                if (!rollup.count[state]){
                    rollup.count[state] = 0;
                    rollup.estimate[state] = 0;
                    rollup.todo[state] = 0;
                }

                rollup.count[state]++;
                rollup.estimate[state] += (snap.Estimate || 0);
                rollup.todo[state] += (snap.ToDo || 0)
            }
        }

        return rollup;

    },
    _getSnapsByOid: function(snapshots, featureObjectIDs){
        var hash = {};
        Ext.Array.each(featureObjectIDs, function(oid) {
            hash[oid] = [];
        });
        var number_of_snaps = snapshots.length;
        
        for (var i=0; i< number_of_snaps; i++){
            var snap = snapshots[i].getData();
            var itemHierarchy = snap._ItemHierarchy;
            
//            var objectID = Ext.Array.intersect(featureObjectIDs, itemHierarchy)[0];
//            hash[objectID].push(snap);
            Ext.Array.each(itemHierarchy, function(objectID){
                if ( hash[objectID] ) { hash[objectID].push(snap); };
            });
        }
        return hash;
    },
    _fetchLBAPIChunk: function(objectIDs, taskOwners, storyOids){
        var deferred = Ext.create('Deft.Deferred');

        var filters = [
            {
                property: '_ItemHierarchy',
                operator: 'in',
                value: objectIDs
            },{
                property: '_TypeHierarchy',
                value: 'Task'
            },{
                property: '__At',
                value: "current"
            }

        ];

        Ext.create('Rally.data.lookback.SnapshotStore',{
            fetch: this._getLBAPIFetchList(),
            filters: filters,
            limit: Infinity,
            hydrate: ['State'],
            sorters: [{
                property: 'ObjectID',
                direction: 'ASC'
            }],
            removeUnauthorizedSnapshots: true,
            useHttpPost: true
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading snapshots for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    this.logger.log('_fetchLBAPIChunk FAILURE', msg);
                    deferred.resolve(msg);
                }
            },
            scope: this
        });
        return deferred;
    },
    _fetchChunk: function(objectIDs){
        var deferred = Ext.create('Deft.Deferred');

        var filters = _.map(objectIDs, function(o){ return {
                property: "Feature.ObjectID",
                value: o
            }
        });
        filters = Rally.data.wsapi.Filter.or(filters);

        filters = filters.and({
            property: "Tasks.ObjectID",
            operator: '>',
            value: 0
        });

        Ext.create('Rally.data.wsapi.Store',{
            fetch: this._getFetchList(),
            filters: filters,
            model: 'HierarchicalRequirement'
        }).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    var msg = "Failure loading records for objectIDs: " + objectIDs.join(', ') + ":  " + operation.error.errors.join(',');
                    deferred.resolve(msg);
                }
            }
        });
        return deferred;
    },
    _getFetchList: function(){
        return ['ObjectID','Feature','Tasks','State','Estimate','ToDo'];
    },
    _getLBAPIFetchList: function(){
        return ['ObjectID','State','Estimate','ToDo','_ItemHierarchy','WorkProduct','Owner'];
    }

});
Ext.define('CArABU.technicalservices.StandaloneFilter',{
    extend: 'Ext.container.Container',
    alias: 'widget.standalonefilter',
    mixins: [
        'Rally.ui.gridboard.plugin.GridBoardControlShowable'
    ],

    layout: {
        type: 'auto'
    },

    items: [
        {
            itemId: 'header',
            xtype: 'rallyleftright',
           // padding: '4 10',
            overflowX: 'hidden',
            items: [
                {
                    itemId: 'left',
                    cls: 'rly-left'
                },
                {
                    itemId: 'right',
                    cls: 'rly-left'
                },
                {
                    itemId: 'rightright',
                    cls: 'rly-left'
                }
            ],
            cls: 'rui-leftright'
        }
    ],


    initComponent: function(){

        this.plugins = [{
            ptype: 'rallygridboardinlinefiltercontrol',
            headerPosition: 'right',
            inlineFilterButtonConfig: {
                modelNames: ['PortfolioItem/Feature'],

                inlineFilterPanelConfig: {
                    collapsed: false,
                    quickFilterPanelConfig: {
                        fieldNames: ['Owner', 'Milestones']
                    }
                }
            }
        }];

        this.callParent(arguments);


    },
    getHeader: function(){
        return this.down('#header');
    },
    getLeft: function(){
        return this.down('#left');
    },
    getRight: function(){
        return this.down('#rightright'); //this.down('#right');
    },
    getToggleState: function(){
        return 'grid';
    },
    getContext: function(){
        return this.context;
    },
    getCustomFilter: function(){
        if (this.customFilter && this.customFilter.length > 0){
            return this.customFilter[0];
        }
        return null;
    },
    applyCustomFilter: function(filterObj){
        this.customFilter = filterObj && filterObj.filters;
    }
});
Ext.define('CArABU.technicalservices.ModelBuilder',{
    singleton: true,

    build: function(modelType, newModelName) {
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: modelType,
            success: function(model) {

                var default_fields = [{
                    name: '__taskToDo',
                    defaultValue: [0,0,0],
                    sortType: function(value) {
                        return Ext.Array.sum(value);
                    }
                },{
                    name: '__taskEstimate',
                    defaultValue: [0,0,0],
                    sortType: function(value) {
                        return Ext.Array.sum(value);
                    }
                 },{
                    name: '__taskCount',
                    defaultValue: [0,0,0],
                    sortType: function(value) {
                        return Ext.Array.sum(value);
                    }
                },{
                    name: '__taskEstimatePct',
                    defaultValue: [0,0,0],
                    sortType: function(value) {
                        return  value && value[2] || 0;
                    }
                },{
                    name: '__taskCountPct',
                    defaultValue: [0,0,0],
                    sortType: function(value) {
                        return value && value[2] || 0;
                    }
                },{
                    name: '__missingEstimates',
                    defaultValue: 0
                }];

                var new_model = Ext.define(newModelName, {
                    extend: model,
                    logger: new Rally.technicalservices.Logger(),
                    fields: default_fields,
                    snaps: undefined,

                    addTasks: function(snaps){
                        this.tasks = snaps || [];
                    },
                    hasTasks: function(){
                        var taskCount = this.get('__taskCount') || [0];
                        return Ext.Array.sum(taskCount) > 0;
                    },
                    calculateRollups: function(taskOwners, storyOids) {
                        var TASK_STATES = ['Defined','In-Progress','Completed'];
                        var snaps = this.tasks || [];

                        storyOids = storyOids || [];

                        var taskCount = [0, 0, 0],
                            taskEstimate = [0, 0, 0],
                            taskToDo = [0, 0, 0],
                            taskCompleted = 0,
                            missingEstimates = 0;

                        if (snaps && snaps.length > 0) {

                            for (var i = 0; i < snaps.length; i++) {
                                var snap = snaps[i],
                                    state = snap.State,
                                    stateIdx = _.indexOf(TASK_STATES, state),
                                    includeTask = true;

                                if (taskOwners && taskOwners.length > 0){
                                    includeTask = Ext.Array.contains(taskOwners, snap.Owner);
                                }

                                if (includeTask && storyOids && storyOids.length > 0){
                                    includeTask = Ext.Array.contains(storyOids, snap.WorkProduct);
                                }

                                if (includeTask){
                                    taskCount[stateIdx]++;
                                    if (!snap.Estimate){
                                        missingEstimates++;
                                    }
                                    var est = snap.Estimate || 0;
                                    if (stateIdx < 2){
                                        est = Math.max(est, snap.ToDo || 0);
                                        taskToDo[stateIdx] += (snap.ToDo || 0);
                                        taskCompleted += est - (snap.ToDo || 0);
                                    } else {
                                        taskCompleted += est;
                                    }
                                    taskEstimate[stateIdx] += est;
                                }
                            }
                        }

                        this.set('__taskToDo', taskToDo);
                        this.set('__taskEstimate', taskEstimate);
                        this.set('__taskCount', taskCount);
                        this.set('__missingEstimates', missingEstimates);

                        var totalEstimate =  Ext.Array.sum(taskEstimate),
                            totalCount = Ext.Array.sum(taskCount),
                            taskCountPct = [0,0,0],
                            taskEstimatePct = [0,0,0];

                        for (var i=0; i<3; i++){
                            if (totalCount > 0){taskCountPct[i] = taskCount[i]/totalCount * 100};
                            if (totalEstimate > 0) {
                                if (i === 2){
                                    taskEstimatePct[i] = taskCompleted/totalEstimate * 100
                                } else {
                                    taskEstimatePct[i] = taskToDo[i]/totalEstimate * 100
                                }
                            };
                        }

                        this.set('__taskCountPct', taskCountPct);
                        this.set('__taskEstimatePct', taskEstimatePct);

                        return { todo: taskToDo, count: taskCount, estimate: taskEstimate };
                    }
                });
                deferred.resolve(new_model);
            }
        });
        return deferred;
    },

    // sometimes, dates are provided as beginning of day, but we 
    // want to go to the end of the day
    shiftToEndOfDay: function(js_date) {
        return Rally.util.DateTime.add(Rally.util.DateTime.add(js_date,'day',1),'second',-1);
    },

    isAccepted: function(state) {
        return ( state == 'Accepted' );
    }
});
Ext.override(Rally.ui.gridboard.plugin.GridBoardFieldPicker, {
    gridFieldBlackList: [
        'Actuals',
        'Changesets',
        'Children',
        // 'Description',
        // 'Notes',
        'ObjectID',
        'Predecessors',
        'RevisionHistory',
        'Subscription',
        'Successors',
        'TaskIndex',
        'Workspace',
        'VersionId'
    ]
});

Ext.override(Rally.ui.inlinefilter.PropertyFieldComboBox, {
    /**
     * @cfg {String[]} whiteListFields
     * field names that should be included from the filter row field combobox
     */
    defaultWhiteListFields: ['Milestones']
});

Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns= _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getColumnName(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);
        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    },
    _getColumnConfigsBasedOnCurrentOrder: function(columnConfigs) {
        var cols = _(this.headerCt.items.getRange()).map(function(column) {
            //override:  Added additional search for column.text
            return _.contains(columnConfigs, column.dataIndex) ? column.dataIndex : _.find(columnConfigs, {xtype: column.xtype, text: column.text });
        }).compact().value();

        return cols;
    },
    _restoreColumnOrder: function(columnConfigs) {

        var currentColumns = this._getColumnConfigsBasedOnCurrentOrder(columnConfigs);
        var addedColumns = _.filter(columnConfigs, function(config) {
            return !_.find(currentColumns, {dataIndex: config.dataIndex}) || Ext.isString(config);
        });
        return currentColumns.concat(addedColumns);
    },
    _applyStatefulColumns: function(columns) {
        if (this.alwaysShowDefaultColumns) {
            _.each(this.columnCfgs, function(columnCfg) {
                if (!_.any(columns, {dataIndex: this._getColumnName(columnCfg)})) {
                    columns.push(columnCfg);
                }
            }, this);
        }

        if (this.config && this.config.derivedColumns){
            this.columnCfgs = columns.concat(this.config.derivedColumns);
        } else {
            this.columnCfgs = columns;
        }

    }
});

Ext.override(Rally.ui.combobox.TimeboxComboBox, {
    initComponent: function() {

        this.displayTpl = Ext.create('Ext.XTemplate',
            '<tpl for=".">{[this.getName(values)]}<tpl if="xindex<xcount">, </tpl></tpl>',
            {
                getName: function(values){
                    return values.formattedName || "Unscheduled";
                }
            }
        );

        if (this.showArrows) {
            this.pickerOffset = [21, 0];

            this.displayTpl = Ext.create('Ext.XTemplate',
                '<tpl for=".">{formattedName}<tpl if="formattedStartDate"> ({formattedStartDate} - {formattedEndDate})</tpl></tpl>'
            );
        }

        this.callParent(arguments);
        this.store.on('add', this._onStoreAdd, this);
        this.on('change', this._onChange, this);
        this.on('expand', this._onExpand, this);
    }
});

Ext.override(Rally.ui.combobox.UserComboBox, {

    applyState: function (state) {

        this.store.on('load', function () {
            this.setValue(state.value);
            this.saveState();
        }, this, {single: true});

        if (state.value && this.value != state.value) {
            if (this.store) {
                this.store.addFilter([{
                    property: 'ObjectID',
                    value: state.value
                }]);
                this.refreshStore();
            }
        }
    },

    beforeQuery: function(queryPlan) {
        var queryString = queryPlan.query,
            idFilter = Rally.data.wsapi.Filter.or([
                {
                    property: 'UserName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'DisplayName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'FirstName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'LastName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'EmailAddress',
                    operator: 'contains',
                    value: queryString
                }
            ]);
        queryPlan.query = idFilter.toString();

        return this.callSuper(arguments);
    }
});

Ext.override(Rally.ui.picker.MilestonePicker,{
    getState: function(){
        var refArray = Ext.Array.map(this.getValue(), function(m){
            return m.get('_ref');
        });
        return {value: refArray};
    },
    applyState: function(state) {
        var pk = this;
        if (state.value && state.value.length > 0 && this.getValue() != state.value){
            var filters = Ext.Array.map(state.value, function(f){
                return {
                    property: 'ObjectID',
                    value: Rally.util.Ref.getOidFromRef(f)
                }
            });
            Ext.create('Rally.data.wsapi.Store',{
                model: 'Milestone',
                fetch: ['Name','TargetDate'],
                filters: Rally.data.wsapi.Filter.or(filters)
            }).load({
                callback: function(records){
                    Ext.Array.each(records, function(r){
                        pk.select(r);
                    });
                    pk.syncSelectionText();
                }
            });
        }
    }
});

Ext.define('CArABU.technicalservices.PctCompleteTemplate',{
    extend: 'Ext.XTemplate',

    /**
     * @cfg {String}
     * define a width if necessary to fit where it's being used
     */
    width: '100%',
    /**
     * @cfg {String}
     * define a height if necessary to fit where it's being used
     */
    height: '20px',

    config: {

        calculateColorFn: function(stateIdx){
            if (this.field === '__taskToDo'){
                return '#808080';
            }
            var colors = ['#FBB990','#7CAFD7','#8DC63F'];
            return colors[stateIdx];
        },
        getTooltip: function(values){
            var tooltip = '';
            if (this.getText(values,0)){
                tooltip += Ext.String.format("<span class='defined'>Defined</span>: {0}</br>", this.getText(values,0) || 0);
            }
            if (this.getText(values,1)){
                tooltip += Ext.String.format("<span class='inprogress'>In-Progress</span>: {0}</br>", this.getText(values,1) || 0);
            }
            if (this.getText(values,2)){
                tooltip += Ext.String.format("<span class='completed'>Completed</span>: {0}</br>", this.getText(values,2) || 0);
            }

            if (this.showDangerNotificationFn(values)){
                tooltip =  Ext.String.format("{0}<p class='warning'><span class='icon-warning'></span>{1} missing Task Estimates</p>", tooltip, values && values.__missingEstimates);
            }

            if (tooltip.length > 0){
                tooltip = values.FormattedID + '<br/>' + tooltip;
            }
            return tooltip;
        },
        showDangerNotificationFn: function(recordData) {
            return this.field === '__taskEstimatePct' && recordData && recordData.__missingEstimates > 0;
        },
        getContainerClass: function(recordData) {
            return '';
        },
        getClickableClass: function(){
            return '';
        },
        getDimensionStyle: function(){
            return 'width: ' + this.width + '; height: ' + this.height + '; line-height: ' + this.height + ';display: inline-block';
        },
        getPercent: function(values, stateIdx){

            if (!this.calcPercent){
                return values && values[this.field] && values[this.field][stateIdx] || 0;
            }
            var val = 0;
            var total =  Ext.Array.sum(values[this.field]),
                numerator = values[this.field][stateIdx];

            if (total > 0 && numerator){
                val = (numerator/total * 100);
            }
            return val;
        },
        calculateWidth: function (values, stateIdx) {
            if (!this.total){
                return this.getPercent(values, stateIdx) + '%';
            }

            var total =  this.total,
                numerator = values[this.field][stateIdx];

            if (total > 0 && numerator){
                return (numerator/total * 100) + '%';
            }
            return 0
        },
        getText: function(values, stateIdx){

            if (!this.total){
                var pct = this.getPercent(values, stateIdx);
                return pct > 0 ? Math.round(pct) + '%' : "";
            }

            var val = values && values[this.field] && values[this.field][stateIdx] || 0;

            if (val){
                if (this.granularityDivider){
                    val = val/this.granularityDivider; //convert to weeks
                }
                if (this.field === '__taskToDo'){
                    return val.toFixed(1);
                }
                if (val < 1 && val > 0){
                    return val.toFixed(3);
                }
                return Math.round(val) || "";
            }
            return "";
        }
    },

    constructor: function(config) {
        var templateConfig = config && config.template || [
                '<tpl>',
                '<div data-qtip="{[this.getTooltip(values)]}" class="progress-bar-container {[this.getClickableClass()]} {[this.getContainerClass(values)]}" style="{[this.getDimensionStyle()]}">',
                '<div class="rly-progress-bar" style="text-align:center;background-color: {[this.calculateColorFn(0)]}; width: {[this.calculateWidth(values,0)]}; ">',
                '<tpl if="this.showDangerNotificationFn(values)">',
                '<div class="missing-task-estimates"></div>',
                '</tpl>',
                '{[this.getText(values,0)]}</div>',
                '<div class="rly-progress-bar" style="text-align:center;background-color: {[this.calculateColorFn(1)]}; width: {[this.calculateWidth(values,1)]}; ">{[this.getText(values,1)]}</div>',
                '<div class="rly-progress-bar" style="text-align:center;background-color: {[this.calculateColorFn(2)]}; width: {[this.calculateWidth(values,2)]}; ">{[this.getText(values,2)]}</div>',
                '</div>',
                '</tpl>'
            ];

        templateConfig.push(this.config);
        templateConfig.push(config);

        return this.callParent(templateConfig);
    }
});



Ext.define('CArABU.technicalservices.TaskProgressTemplateColumn', {
    extend: 'Ext.grid.column.Template',
    alias: ['widget.taskprogresscolumn'],

    align: 'right',

    initComponent: function(){
        var me = this;
        Ext.QuickTips.init();
        me.tpl = Ext.create('CArABU.technicalservices.PctCompleteTemplate',{
            field: me.dataIndex,
            total: me.total,
            granularityDivider: me.granularityDivider,
            calcPercent: me.calcPercent || false
        });
        me.callParent(arguments);
    },
    defaultRenderer: function(value, meta, record) {
        meta.style = 'cursor: pointer;';
        var data = Ext.apply({}, record.getData()); //record.get('rollup')); //, record.getAssociatedData());
        return this.tpl.apply(data);
    }
});


Ext.define('CArABU.technicalservices.TaskToDoTemplate',{
    extend: 'Ext.XTemplate',

    /**
     * @cfg {String}
     * define a width if necessary to fit where it's being used
     */
    width: '100%',
    /**
     * @cfg {String}
     * define a height if necessary to fit where it's being used
     */
    height: '20px',

    config: {

        calculateColorFn: function(stateIdx){
           return '#808080';
        },
        getContainerClass: function(recordData) {
            return '';
        },
        getClickableClass: function(){
            return '';
        },
        getDimensionStyle: function(){
            return 'width: ' + this.width + '; height: ' + this.height + '; line-height: ' + this.height + ';display: inline-block';
        },
        calculateWidth: function (values) {
            var total =  this.total,
                numerator = values[this.field][0] + values[this.field][1];
            if (total > 0 && numerator){
                return Math.floor(numerator/total * 100);
            }
            return 0

        },
        calculateRemainingWidth: function(values){
            return 100 - this.calculateWidth(values);
        },

        getText: function(values, idx){
            var width = this.calculateWidth(values);

            var val = values[this.field][0] + values[this.field][1];
            if (val){
                if (this.granularityDivider){
                    val = val/this.granularityDivider; //convert to weeks
                }
                if (val < 1 && val > 0){
                    val = val.toFixed(2);
                } else {
                    val = Math.round(val);
                }
            }

            if (width > 75 && idx === 0){
                return val + "&nbsp;";
            }
            if (width < 75 && idx > 0){
                return "&nbsp;" + val;
            }
            return "";
        }
    },

    constructor: function(config) {
        var templateConfig = config && config.template || [
                '<tpl>',
                '<div class="progress-bar-container {[this.getClickableClass()]} {[this.getContainerClass(values)]}" style="{[this.getDimensionStyle()]}">',
                '<div class="rly-progress-bar" style="text-align:right;color:#e6e6e6;background-color: {[this.calculateColorFn()]}; width: {[this.calculateWidth(values)]}%; ">{[this.getText(values,0)]}</div>',
                '<div class="rly-progress-bar" style="text-align:left;background-color:#e6e6e6; width:{[this.calculateRemainingWidth(values)]}%; ">{[this.getText(values,1)]}</div>',
//                '<div class="rly-progress-bar" style="text-align:center;background-color: {[this.calculateColorFn()]}; width:0; "></div>',
                '</div>',
                '</tpl>'
            ];

        templateConfig.push(this.config);
        templateConfig.push(config);

        return this.callParent(templateConfig);
    }
});



Ext.define('CArABU.technicalservices.TaskToDoTemplateColumn', {
    extend: 'Ext.grid.column.Template',
    alias: ['widget.tasktodocolumn'],

    align: 'right',

    initComponent: function(){
        var me = this;
        Ext.QuickTips.init();
        me.tpl = Ext.create('CArABU.technicalservices.TaskToDoTemplate',{
            total: me.total,
            granularityDivider: me.granularityDivider,
            field: me.dataIndex
        });
        me.callParent(arguments);
    },
    defaultRenderer: function(value, meta, record) {
        meta.style = 'cursor: pointer;';
        var data = Ext.apply({}, record.getData()); //record.get('rollup')); //, record.getAssociatedData());
        return this.tpl.apply(data);
    }
});

Ext.define('CArABU.technicalservices.Utility',{
    singleton: true,
    MAX_CHUNK_SIZE: 25,

    managerObjectIDReportsHash: {},

    fetchManagerTree: function(managerIDField, employeeIDField){
        var deferred = Ext.create('Deft.Deferred');
        this.fetchWsapiRecords({
            model: 'User',
            fetch: ['ObjectID',managerIDField, employeeIDField],
            filters: [{
                property: employeeIDField,
                operator: '!=',
                value: ""
            }]
        }).then({
            success: function(records){
                CArABU.technicalservices.Utility.managerObjectIDReportsHash = CArABU.technicalservices.Utility.buildManagerTree(records, managerIDField, employeeIDField);
                deferred.resolve();
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred;
    },
    getReports: function(userRecord){
        var objectID = userRecord.get('ObjectID'),
            hash = CArABU.technicalservices.Utility.managerObjectIDReportsHash;

        var getSubReports = function(id){
            var subReports = hash[id] || [];
            Ext.Array.each(subReports, function(id){
                subReports = subReports.concat(getSubReports(id));
            });
            return subReports;
        };

        var reports = getSubReports(objectID);
        return reports;
    },
    buildManagerTree: function(userRecords, managerIDField, employeeIDField){
        var managerIDReportObjectIDMap = {},
            employeeIDObjectIDMap = {};

        Ext.Array.each(userRecords, function(u){
            var manager= u.get(managerIDField),
                employeeID = u.get(employeeIDField);
            employeeIDObjectIDMap[employeeID] = u.get('ObjectID');
            if (!managerIDReportObjectIDMap[manager]){
                managerIDReportObjectIDMap[manager] = [];
            }
            managerIDReportObjectIDMap[manager].push(u.get('ObjectID'));
        });

        var reportsHash = {};
        Ext.Object.each(managerIDReportObjectIDMap, function(managerID, reports){
            var objId = employeeIDObjectIDMap[managerID];
            reportsHash[objId] = reports;
        });

        return reportsHash;
    },
    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        config.limit = 'Infinity';

        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation, success){
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    var msg = Ext.String.format("Error fetching features: {0}", operation.error.errors.join(','));
                    deferred.reject(msg);
                }
            }
        });
        return deferred;
    },
    fetchChunkedWsapiRecords: function(config,objectIDs){
        var deferred = Ext.create('Deft.Deferred');
        var promises = [],
            filterOids = false ;

        if (config.filters){
            promises.push(CArABU.technicalservices.Utility.fetchWsapiRecords(config));
            filterOids = true
        } else {
            for (var i=0; i < objectIDs.length; i = i + CArABU.technicalservices.Utility.MAX_CHUNK_SIZE){
                var chunk = Ext.Array.slice(objectIDs, i, i + CArABU.technicalservices.Utility.MAX_CHUNK_SIZE);
                promises.push(CArABU.technicalservices.Utility.fetchWsapiChunk(chunk, config));
            }
        }
        Deft.Promise.all(promises).then({
            success: function(results){
                var records = _.flatten(results);
                if (filterOids){
                    //We had a filter for the features and now we want ot filter out the features that don't meet our criteria
                    records = _.filter(records, function(r){
                        return Ext.Array.contains(objectIDs, r.get('ObjectID'));
                    });
                }
                deferred.resolve(records);
            },
            failure: function(msg){
                deferred.reject(msg);
            },
            scope: this
        });
        return deferred;
    },
    fetchWsapiChunk: function(chunk, config){
        var filters = _.map(chunk, function(c){ return {property: 'ObjectID', value: c}; });
        filters = Rally.data.wsapi.Filter.or(filters);
        config.filters = filters;
        config.pageSize = 2000;
        return CArABU.technicalservices.Utility.fetchWsapiRecords(config);
    }

});

Ext.define("feature-status-by-task", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    items: [
        {xtype:'container',itemId:'filter_box_1', layout: 'hbox'},
        {xtype:'container',itemId:'filter_box_2', layout: 'hbox'},
        {xtype:'container',itemId:'filter_box_3', layout: 'hbox'},
        {xtype:'container',itemId:'filter_box_4', layout: 'hbox'},
        {xtype:'container',itemId:'summary_box', layout: 'hbox', padding: 25},
        {xtype:'container',itemId:'grid_box'},
        {xtype:'container',itemId:'detail_box'}
    ],

    integrationHeaders : {
        name : "feature-status-by-task"
    },

    config: {
        defaultSettings: {
            portfolioItemType: "PortfolioItem/Feature",
            employeeIDField: 'c_EmployeeId',
            managerEmployeeIDField: 'c_ManagerEmployeeId'
        }
    },
    groupByFields: ['c_PMTMaster','c_PMTMasterName'],
    groupByModel: "PortfolioItem/Feature",


    labelWidth: [125,125,125],
    controlWidth: [325,325,325],
    margin: '0 5 0 5',

    launch: function() {
        this.setLoading('Initializing Users...');
        CArABU.technicalservices.Utility.fetchManagerTree(this.getManagerIDField(), this.getEmployeeIDField()).then({
            success: function(){
                this.addMilestonesBox();
                this.addUserBox();
                this.addGroupByBox();
            },
            failure: this.showErrorNotification,
            scope: this
        }).always(function(){ this.setLoading(false); },this);
    },
    getManagerIDField: function(){
        return this.getSetting('managerEmployeeIDField');
    },
    getEmployeeIDField: function(){
        return this.getSetting('employeeIDField');
    },
    addGroupByBox: function(){
        var ct = this.down('#filter_box_3');
        ct.removeAll();

        var idx = 0;
        var groupByFields = this.groupByFields;

       var filterBox = this.down('#filter_box_3').add({
            xtype: 'standalonefilter',
            context: this.getContext(),
            flex: 1
        });

        filterBox.getLeft().add({
            xtype: 'rallyfieldcombobox',
            fieldLabel: 'Group by',
            labelAlign: 'right',
            itemId: 'cbGroupBy',
            margin: this.margin,
            labelWidth: this.labelWidth[idx],
            width: this.controlWidth[idx++],
            allowNoEntry: true,
            noEntryText: "Feature",
            stateful: true,
            stateId: this.getContext().getScopedStateId('fts-GroupBy'),
            model: this.getModelName(),
            _isNotHidden: function(field){
                if (Ext.Array.contains(groupByFields, field.name)){
                    return true;
                }
                return false;
            }
        });

        filterBox.getRight().add({
            xtype: 'rallybutton',
            margin: '0 5 0 25',
            text: 'Update',
            width: 100,
            listeners: {
                click: this.updateView,
                scope: this
            }
        });


    },
    addMilestonesBox: function(){

        var ct = this.down('#filter_box_1');
        ct.removeAll();

        var idx = 0;
        ct.add({
            xtype: 'rallymilestonepicker',
            itemId: 'featureMilestones',
            fieldLabel: 'Feature Milestones',
            stateful: true,
            stateId: this.getContext().getScopedStateId('fts-FeatureMilestones'),
            stateEvents: ['select','deselect'],
            margin: this.margin,
            labelWidth: this.labelWidth[idx],
            width: this.controlWidth[idx++],
            labelAlign: 'right',
            listeners: {
                select: function(pk){
                    pk.syncSelectionText();
                },
                deselect: function(pk,value,values){
                    pk.syncSelectionText();
                    if (!values || values.length === 0){
                        pk.setValueText("");
                    }

                }
            }
        });
        ct.add({
            xtype: 'rallymilestonepicker',
            itemId: 'storyMilestones',
            margin: this.margin,
            labelWidth: this.labelWidth[idx],
            width: this.controlWidth[idx++],
            stateful: true,
            stateId: this.getContext().getScopedStateId('fts-storyMilestones'),
            stateEvents: ['select','deselect'],
            fieldLabel: 'Story Milestones',
            labelAlign: 'right',
            storeConfig: {
                autoLoad: true
            },

            listeners: {
                select: function(pk){
                    pk.syncSelectionText();
                },
                deselect: function(pk,value,values){
                    pk.syncSelectionText();
                    if (!values || values.length === 0){
                        pk.setValueText("");
                    }
                }
            }
        });

        ct.add({
            xtype: 'rallyreleasecombobox',
            margin: this.margin,
            fieldLabel: 'Story Release',
            labelWidth: this.labelWidth[idx],
            allowNoEntry: true,
            allowBlank: false,
            multiSelect: true,
            stateful: true,
            valueField: 'Name',
            displayField: 'Name',
            stateId: this.getContext().getScopedStateId('fts-storyRelease'),
            width: this.controlWidth[idx++],
            labelAlign: 'right',
            cls: 'rally-checkbox-combobox',
            autoSelect: false,
            editable: false,
            defaultSelectionPosition: null,
            allowClear: false,
            showArrows: false,
            listConfig: {
                cls: 'rally-checkbox-boundlist',
                itemTpl: Ext.create('Ext.XTemplate',
                    '<div class="rally-checkbox-image"></div>',
                    '<div class="rally-checkbox-text timebox-name">',
                    '{[this.getDisplay(values)]}</div>',
                    {
                        getDisplay: function(values){
                            return values.Name || "Unscheduled";
                        }
                    }
                )
            }

        });
    },
    addUserBox: function(){

        var ct = this.down('#filter_box_2');
        ct.removeAll();

        var idx = 0;
        ct.add({
            xtype: 'rallyusercombobox',
            margin: this.margin,
            itemId: 'usrTaskOwner',
            fieldLabel: 'Task Owner',
            labelAlign: 'right',
            allowNoEntry: true,
            stateful: true,
            value: null,
            stateId: 'fts-task-owner',
            displayField: "DisplayName",
            valueField: "ObjectID",
            labelWidth: this.labelWidth[idx],
            width: this.controlWidth[idx++]

        });

        ct.add({
            xtype: 'rallyusercombobox',
            margin: this.margin,
            fieldLabel: 'Manager',
            itemId: 'usrManager',
            labelAlign: 'right',
            stateful: true,
            allowNoEntry: true,
            stateId: this.getContext().getScopedStateId('fts-manager'),
            displayField: "DisplayName",
            valueField: "ObjectID",
            value: null,
            labelWidth: this.labelWidth[idx],
            width: this.controlWidth[idx++]
        });

        ct.add({
            xtype: 'rallyusercombobox',
            margin: this.margin,
            fieldLabel: 'Feature Owner',
            itemId: 'usrFeatureOwner',
            allowNoEntry: true,
            labelAlign: 'right',
            stateful: true,
            stateId: this.getContext().getScopedStateId('fts-feature-owner'),
            displayField: "DisplayName",
            valueField: "ObjectID",
            labelWidth: this.labelWidth[idx],
            width: this.controlWidth[idx++]
        });

    },
    getExtendedModelName: function(){
        return "FeatureStatusModel";
    },
    getSummaryBox: function(){
        return this.down('#summary_box');
    },
    getDetailBox: function(){
        return this.down('#detail_box');
    },

    updateView: function(){
        //updateView => fetchStories => fetchFeatures => fetchTasks => refineRecords => buildTreeGrid
        this.getGridBox().removeAll();
        this.getSummaryBox().removeAll();
        this.getDetailBox().removeAll();
        this.setLoading(true);
        //First, we need to get the feature IDs of interest
        this.logger.log('updateView');
        this.fetchWsapiRecords({
            model: 'HierarchicalRequirement',
            fetch: ['Feature','ObjectID','Children'],
            filters: this.getStoryFilters(),
            limit: 'Infinity',
            pageSize: 2000
        }).then({
            success: this.fetchFeatures,
            failure: this.showErrorNotification,
            scope: this
        }).always(function(){
            this.setLoading(false);
        }, this);
    },
    fetchFeatures: function(records){
        //updateView => fetchStories => fetchFeatures => fetchTasks => refineRecords => buildTreeGrid
        this.filterStoryObjectIDs = _.map(records, function(r){ return r.get('ObjectID'); });

        var featureIDs = this.getFeatureIDs(records);

        this.setLoading(true);
        this.logger.log('fetchFeatures', records.length);
        
        records = null;
        
        CArABU.technicalservices.ModelBuilder.build(this.getModelName(), this.getExtendedModelName()).then({
            success: function(model){
                this.setLoading("Loading Features...");

                CArABU.technicalservices.Utility.fetchChunkedWsapiRecords({
                    model: model,
                    fetch: this.getFeatureFetchList(),
                    filters: this.getFeatureFilters(),
                    pageSize: 2000
                }, featureIDs).then({
                    success: this.fetchTasks,
                    failure: this.showErrorNotification,
                    scope: this
                });
            },
            failure: this.showErrorNotification,
            scope: this
        });
    },
    fetchTasks: function(featureRecords){
        //updateView => fetchStories => fetchFeatures => fetchTasks => refineRecords => buildTreeGrid

        if (!featureRecords || featureRecords.length === 0){
            this.setLoading(false);
            this.down('#summary_box').add({
                xtype: 'container',
                html: '<div class="no-data-container"><div class="secondary-message">No Features were found for the currently selected filters and project.</div></div>'
            });
            return;
        }

        this.setLoading("Loading Tasks...");
        this.logger.log('fetchTasks', featureRecords.length);
        
        var store = Ext.create('CArABU.technicalservices.FeatureTaskStore',{   });
        
        Deft.Chain.pipeline([
            function() {  return store.loadTasks(featureRecords,this.getTaskOwners(),this.filterStoryObjectIDs); },
            function(taskRecords) { return store.collectTasks(featureRecords,taskRecords); },
            function(records) { return this.refineRecords(records); }
        ], this);
    },
    
    refineRecords: function(records){
        //updateView => fetchStories => fetchFeatures => fetchTasks => refineRecords => buildTreeGrid
        //this function takes the feature records with the tasks on them and refines them according to the filters.
        this.setLoading(false);
        this.logger.log('refineRecords', records.length);
        
        var maxToDo = 0,
            maxEstimate = 0,
            maxCount = 0,
            totalToDo = [0,0,0],
            totalCount = [0,0,0],
            totalEstimate = [0,0,0],
            taskOwners = this.getTaskOwners(),
            refinedRecords = [];

        this.setLoading('Calculating...');

        Ext.Array.each(records, function(r){
            var resultsHash = r.calculateRollups(taskOwners, this.filterStoryObjectIDs);
            maxToDo = Math.max(maxToDo, Ext.Array.sum(resultsHash.todo));
            maxEstimate = Math.max(maxEstimate, Ext.Array.sum(resultsHash.estimate));
            maxCount = Math.max(maxCount, Ext.Array.sum(resultsHash.count));

            for (var i = 0; i < 3; i++){
                totalToDo[i] += resultsHash.todo[i];
                totalCount[i] += resultsHash.count[i];
                totalEstimate[i] += resultsHash.estimate[i];
            }
            if (r.hasTasks()){
                refinedRecords.push(r);  //only show features with tasks that meet criteria
            }
        }, this);

        if (!refinedRecords || refinedRecords.length === 0){
            this.setLoading(false);
            this.down('#summary_box').add({
                xtype: 'container',
                html: '<div class="no-data-container"><div class="secondary-message">No Features were found for the currently selected filters and project.</div></div>'
            });
            return;
        }
        this.buildSummaryBar(refinedRecords.length, totalToDo, totalEstimate, totalCount);
        this.buildTreeGrid(refinedRecords, maxToDo, maxEstimate, maxCount);
    },
    buildSummaryBar: function(totalFeatures, totalToDo, totalEstimate, totalCount) {
        this.logger.log('buildSummaryBar');
        
        var colorData = [{
            color: '#FBB990',
            label: 'Defined'
        },{
            color: '#7CAFD7',
            label: 'In-Progress'
        },{
            color: '#8DC63F',
            label: 'Completed'
        }];

        var maxToDo = Math.max(totalEstimate[0] + totalEstimate[1], Ext.Array.sum(totalToDo)),
            maxEstimate = Ext.Array.sum(totalEstimate),
            maxCount = Ext.Array.sum(totalCount);

        this.getSummaryBox().add({
            xtype: 'rallygrid',
            itemId: 'summary-grid',
            store: Ext.create('Rally.data.custom.Store',{
                data: [{
                    legend: colorData,
                    totalCount: totalFeatures,
                    totalTaskToDo: totalToDo,
                    totalTaskEstimate: totalEstimate,
                    totalTaskCount: totalCount
                }]
            }),
            enableRanking: false,
            enableBulkEdit: false,
            showRowActionsColumn: false,
            columnCfgs: [{
                xtype: 'templatecolumn',
                tpl: '<tpl for="legend"><div class="tslegend" style="background-color:{color}">&nbsp;&nbsp;</div><div class="tslegendtext">&nbsp;&nbsp;{label}</div><span class="tslegendspacer">&nbsp;</span></tpl>',
                width: 350
            },{
                text: 'Total Features',
                dataIndex: 'totalCount',
                width: 100,
                align: 'center'
            },{
                xtype: 'tasktodocolumn',
                dataIndex: 'totalTaskToDo',
                total: maxToDo,
                text: "Total Task ToDo (wks)",
                granularityDivider: 40,
                flex: 2,
                align: 'center'
            },{
                xtype: 'taskprogresscolumn',
                dataIndex: 'totalTaskEstimate',
                total: maxEstimate,
                text: "Total Task Estimate (wks)",
                granularityDivider: 40,
                flex: 2,
                align: 'center'
            },{
                xtype: 'taskprogresscolumn',
                text: "Total Task Estimate %",
                dataIndex: 'totalTaskEstimate',
                calcPercent: true,
                flex: 2,
                align: 'center'
            },{
                xtype: 'taskprogresscolumn',
                dataIndex: 'totalTaskCount',
                text: "Total # Tasks",
                total: maxCount,
                flex: 2,
                align: 'center'
            },{
                xtype: 'taskprogresscolumn',
                text: "Total # Tasks %",
                dataIndex: 'totalTaskCount',
                calcPercent: true,
                flex: 2,
                align: 'center'

            }],
            width: '100%',
            flex: 1,
            showPagingToolbar: false
        });
    },
    getGroupTpl: function(){
        var tpl =  '<div>{name} ({rows.length})</div>';
        return tpl;

    },
    buildTreeGrid: function(records, maxToDo, maxEstimate, maxCount){
        //updateView => fetchStories => fetchFeatures => fetchTasks => refineRecords => buildTreeGrid
        this.logger.log('buildTreeGrid', records.length);
        this.setLoading(false);

        if (records.length === 0){

        }


        var groupBy = this.getGroupByField();

        this.getGridBox().removeAll();
        this.down('#detail_box').removeAll();

        if (groupBy){
            var summaryObj = this.buildTreeStore(groupBy, records);
            var summaryStore = summaryObj.store;

           // We need a tree grid
            this.getGridBox().add({
                xtype: 'treepanel',
                cls: 'rally-grid',
                padding: 25,
                selModel: Ext.create("Ext.selection.RowModel",{
                    listeners: {
                        select: this._showStories,
                        scope: this
                    }
                }),
                store: summaryStore,
                rootVisible: false,
                columns: this.getColumnCfgs(groupBy, summaryObj.maxToDo, summaryObj.maxEstimate, summaryObj.maxCount),
                width: '100%',
                flex: 1,
                viewConfig: {
                    stripeRows: false,
                    getRowClass: function(record) {
                        if (!record.get('FormattedID')){
                            return 'grouped-row';
                        }
                        return '';
                    }
                }
            });



        } else {
          //  A regular grid is fine.

            this.getGridBox().add({
                xtype: 'rallygrid',
                context: this.getContext(),
                modelNames: this.getExtendedModelName(),
                store: Ext.create('Rally.data.custom.Store',{
                    model: this.getExtendedModelName(),
                    data: records,
                    //pageSize: records.length
                }),
                selModel: Ext.create("Ext.selection.RowModel",{
                    listeners: {
                        select: this._showStories,
                        scope: this
                    }
                }),
                listeners: {
                    columnresize: this.saveColumnWidths,
                    render: this.saveColumnWidths,
                    scope: this
                },
                enableRanking: false,
                enableBulkEdit: false,
                showRowActionsColumn: false,
                columnCfgs: this.getColumnCfgs(groupBy, maxToDo, maxEstimate, maxCount),
                height: this.getHeight(),
                width: '100%',
                flex: 1,
                showPagingToolbar: true
            });
       }


    },
    buildTreeStore: function(groupBy, featureRecords){


        var treeModel = Ext.define("GroupedFeatureModel", {
            extend: "Ext.data.TreeModel",
            fields: featureRecords[0].getFields()
        });

        var hash = {},
            displayGroup = {};

        var otherGroupBy = this.groupByFields[0];
        if (groupBy === this.groupByFields[0]){
            otherGroupBy = this.groupByFields[1];
        }

        Ext.Array.each(featureRecords, function(f){
            var groupValue = f.get(groupBy) || "None";
            if (!hash[groupValue]) {
                hash[groupValue] = [];
            }
            var childData = f.getData();
            childData.children = [];
            childData.leaf = true;
            hash[groupValue].push(Ext.create(treeModel, childData));

            if (!displayGroup[groupValue]){
                displayGroup[groupValue] = [];
            }
            if (!Ext.Array.contains(displayGroup[groupValue],childData[otherGroupBy])){
                displayGroup[groupValue].push(childData[otherGroupBy]);
            }

        });

        var data = [];
        var maxToDo = 0,
            maxEstimate = 0,
            maxCount = 0;
        Ext.Object.each(hash, function(key, children){
            var taskToDo = [0,0,0],
                taskEstimate = [0,0,0],
                taskCount = [0,0,0];

            Ext.Array.each(children, function(c){
                for (var i=0; i<3; i++){
                    taskToDo[i] += c.get('__taskToDo')[i];
                    taskEstimate[i] += c.get('__taskEstimate')[i];
                    taskCount[i] += c.get('__taskCount')[i];
                }
            });
            maxToDo = Math.max(maxToDo, Ext.Array.sum(taskToDo));
            maxEstimate = Math.max(maxEstimate, Ext.Array.sum(taskEstimate));
            maxCount = Math.max(maxCount, Ext.Array.sum(taskCount));

            var fields = {children: children, leaf: false};
            fields[groupBy] = key;
            fields[otherGroupBy] = displayGroup[key];
            fields.__taskCount = taskCount;
            fields.__taskEstimate = taskEstimate;
            fields.__taskToDo = taskToDo;

            data.push(Ext.create(treeModel, fields));
        });

        return {
            store: Ext.create('Ext.data.TreeStore', {
            root: {
                children: data,
                expanded: false
            },
            model: treeModel
        }),
            maxToDo: maxToDo,
            maxCount: maxCount,
            maxEstimate: maxEstimate
        };
    },
    getStoryFetchList: function(){
        return ['ObjectID','FormattedID','Name','Feature','Milestones','Owner',"DisplayName","c_PMTQEOwner","WorkProduct"];

    },
    getStoryColumnCfgs: function(){
        var columns = [{
            xtype: 'templatecolumn',
            dataIndex: 'FormattedID',
            tpl: 'Rally.ui.renderer.template.FormattedIDTemplate'
        },{
            dataIndex: 'Name',
            text: 'Name',
            flex: 1
        },{
            dataIndex: 'ScheduleState'
        }];

        return columns.concat(this.getAdditionalStoryColumnCfgs());
    },
    getAdditionalStoryColumnCfgs: function(){
        return [{
            xtype: 'templatecolumn',
            tpl: '<tpl>{name}</tpl>',
            text: "Feature Owner",
            defaultRenderer: function(value, meta, record) {
                var feature = record.get('Feature')
                return this.tpl.apply({name: feature && feature.Owner && feature.Owner.DisplayName || "" });
            }
        },{
            xtype: 'templatecolumn',
            text: "Feature QE Owner",
            tpl: '<tpl>{c_PMTQEOwner}</tpl>',
            defaultRenderer: function(value, meta, record) {
                var feature = record.get('Feature')
                return this.tpl.apply(feature);
            }
        }];
    },
    _showStories: function(store, record, index){

        this.down('#detail_box').removeAll();

        var groupBy = this.getGroupByField(),
            featureFilterField =  "ObjectID",
            modelNames = ['hierarchicalrequirement'],
            taskOwners = this.getTaskOwners();

        if (!record.get('ObjectID')){
            featureFilterField = groupBy;
        }

       var filters = Ext.create('Rally.data.wsapi.Filter',{
                property: "Feature." + featureFilterField,
                value: record.get(featureFilterField)
            });

        var storyFilters = this.getStoryFilters();
        if (storyFilters && storyFilters.length > 0){
            filters = filters.and(storyFilters);
        }

        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: modelNames,
            autoLoad: false,
            enableHierarchy: true,
            fetch: this.getStoryFetchList(),
            remoteSort: true,
            filters: filters
        }).then({
            success: function(store) {

                this.down('#detail_box').add({
                    xtype: 'rallygridboard',
                    context: this.getContext(),
                    modelNames: modelNames,
                    stateful: false,
                    stateId: "grid-detail",
                    itemId: 'detail-grid',
                    toggleState: 'grid',
                    plugins: [{
                        ptype: 'rallygridboardfieldpicker',
                        headerPosition: 'left',
                        modelNames: modelNames,
                        stateful: true,
                        stateId: this.getContext().getScopedStateId('detail-columns')
                    },{
                        ptype: 'rallygridboardinlinefiltercontrol',
                        inlineFilterButtonConfig: {
                            stateful: true,
                            stateId: this.getContext().getScopedStateId('detail-filters'),
                            modelNames: modelNames,
                            inlineFilterPanelConfig: {
                                quickFilterPanelConfig: {
                                    defaultFields: [
                                        'ArtifactSearch',
                                        'Owner',
                                        'State'
                                    ]
                                }
                            }
                        }
                    },{
                        ptype: 'rallygridboardactionsmenu',
                        menuItems: [
                            {
                                text: 'Export...',
                                handler: function() {
                                    window.location = Rally.ui.gridboard.Export.buildCsvExportUrl(
                                        this.down('rallygridboard').getGridOrBoard());
                                },
                                scope: this
                            }
                        ],
                        buttonConfig: {
                            iconCls: 'icon-export'
                        }
                    }],
                    gridConfig: {
                        store: store,
                        storeConfig: {
                            filters: filters
                        },
                        enableRanking: false,
                        columnCfgs: this.getStoryColumnCfgs(),
                        derivedColumns: this.getAdditionalStoryColumnCfgs(),
                        viewConfig: {
                            xtype: 'rallytreeview',
                            enableTextSelection: false,
                            animate: false,
                            loadMask: false,
                            forceFit: true,
                            plugins: ['rallytreeviewdragdrop', 'rallyviewvisibilitylistener'],
                            getRowClass: function(record) {
                                if (record.get('_type') === 'task') {

                                    var ownerID = record.get('Owner') && record.get('Owner').ObjectID || 0;
                                    if (!taskOwners || taskOwners.length === 0 || Ext.Array.contains(taskOwners, ownerID)){
                                        return 'included-task';
                                    }
                                }
                                return '';
                            }
                        }
                    },
                    height: 400
                });
            },
            scope: this
        });


    },
    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
        this.setLoading(false);
    },
    getGroupByField: function(){
        return this.down('#cbGroupBy') && this.down('#cbGroupBy').getValue() || null;
    },
    getOtherGroupByField: function(){

        if (this.getGroupByField() === this.groupByFields[0]){
            return this.groupByFields[1];
        }
        return this.groupByFields[0];
    },
    getGroupByDisplayName: function(){
        var cb = this.down('#cbGroupBy');
        return cb && cb.getRecord() &&
            cb.getRecord() && cb.getRecord().get(cb.displayField) || null;
    },
    getFeatureIDs: function(storyRecords){
        var ids = [];
        Ext.Array.each(storyRecords, function(s){
            var id = s.get('Feature') && s.get('Feature').ObjectID;
            if (id && !Ext.Array.contains(ids, id)){
                ids.push(id);
            }
        });
        return ids;
    },
    getFeatureFilters: function(){

        var featureFilters = this.down('standalonefilter').getCustomFilter(),
            filters = [];

        if (featureFilters){
            filters.push(featureFilters);
        }

        var milestones = this.down('#featureMilestones') && this.down('#featureMilestones').getValue();
        if (milestones && milestones.length > 0){
            var milestoneFilter = Ext.Array.map(milestones, function(m){
                return {
                    property: "Milestones",
                    value: m.get('_ref')
                };
            });
            milestoneFilter =  Rally.data.wsapi.Filter.or(milestoneFilter);
            filters.push(milestoneFilter);
        }

        var featureOwner = this.down('#usrFeatureOwner') && this.down('#usrFeatureOwner').getValue(),
            featureOwnerFilter = null;


        if (featureOwner){
            featureOwnerFilter = Ext.create('Rally.data.wsapi.Filter',{
                property: 'Owner.ObjectID',
                value: featureOwner
            });

            filters.push(featureOwnerFilter);
        }

        if (filters.length > 0){
            filters = Rally.data.wsapi.Filter.and(filters);
            return filters;
        }
        return [];
    },
    getFeatureFetchList: function(){
        var fetch =  ['ObjectID','FormattedID','Name','Owner','c_PMTQEOwner'];
        if (this.getGroupByField()){
            fetch = fetch.concat(this.groupByFields);
        }
        return fetch;
    },
    getModelName: function(){
        return this.getSetting('portfolioItemType');
    },
    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        config.limit = 'Infinity';

        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation, success){

                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    var msg = Ext.String.format("Error fetching features: {0}", operation.error.errors.join(','));
                    deferred.reject(msg);
                }
            },
            scope: this
        });
        return deferred;
    },

    getStoryDetailFilters: function(){
        var filters = this.getStoryFilters();

        var taskOwners = this.getTaskOwners();
        if (taskOwners){

            var taskOwnerFilters = _.map(taskOwners, function(t){
                return {
                    property: 'Tasks.Owner.ObjectID',
                    value: t
                };
            });
            taskOwnerFilters = Rally.data.wsapi.Filter.or(taskOwnerFilters);
            if (filters){
                filters = taskOwnerFilters.and(filters);
            } else {
                filters = taskOwnerFilters;
            }

        }

        return filters;

        //Now we need to filter on task owner and manager owner
    },
    getStoryFilters: function(){
        var timeboxCombo = this.down('rallyreleasecombobox'),
            timeboxFilter = timeboxCombo && timeboxCombo.getValue() || null,
            milestoneFilter = null,
            milestones = this.down('#storyMilestones') && this.down('#storyMilestones').getValue();

        if (milestones && milestones.length > 0){
            milestoneFilter = Ext.Array.map(milestones, function(m){
                return {
                    property: "Milestones",
                    value: m.get('_ref')
                };
            });
            milestoneFilter =  Rally.data.wsapi.Filter.or(milestoneFilter);
        }

        if (Ext.isArray(timeboxFilter) && timeboxFilter.length > 0){
            var timeboxFilters = [];
            Ext.Array.each(timeboxFilter, function(t){
                if (!t){
                    timeboxFilters.push({
                        property: 'Release',
                        value: ""
                    });
                } else {
                    timeboxFilters.push({
                        property: 'Release.Name',
                        value: t
                    });
                }
            });
            if (timeboxFilters.length > 1){
                timeboxFilter = Rally.data.wsapi.Filter.or(timeboxFilters);
            } else {
                timeboxFilter = Ext.create('Rally.data.wsapi.Filter',timeboxFilters[0]);
            }
            if (milestoneFilter){
                return timeboxFilter.and(milestoneFilter);
            }
            return timeboxFilter;
        }

       return milestoneFilter || [];
    },
    getTaskOwners: function(){
        var taskOwner = this.down('#usrTaskOwner') && this.down('#usrTaskOwner').getRecord();
        var manager = this.down('#usrManager') && this.down('#usrManager').getRecord();

        var users = [];
        if (taskOwner && taskOwner.get('ObjectID')){
            users.push(taskOwner.get('ObjectID'));
        }
        if (manager){
            var reports = CArABU.technicalservices.Utility.getReports(manager);
            users = users.concat(reports);
        }
        if (users.length > 0){
            return users;
        }
        return null;
    },

    showError: function(msg){
        this.logger.log('showError', msg);
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    getColumnCfgs: function(groupBy, maxToDo, maxEstimate, maxCount){

        var columns = [];

        var groupBy = this.getGroupByField(),
            otherGroupBy = this.getOtherGroupByField();
        var totalWidth = 450,
            treeColumnWidth = 0,
            idAndNameSortable = true ;

        if (groupBy){
            treeColumnWidth = 75;
            idAndNameSortable = false;
            columns.push({
                xtype: 'treecolumn',
                text: this.getGroupByDisplayName(),
                dataIndex: groupBy,
                tdCls: 'absolute-cell-inner',
                menuDisabled: true,
                width: treeColumnWidth,
                renderer: function(v,m,r){
                    //We don't want to show this field if this is a leaf node.
                    if (!r.get('FormattedID')) {
                        var val = r.get(groupBy),
                            otherVals = r.get(otherGroupBy) || [];

                        var x = val;
                        if (!Ext.isArray(otherVals)){
                            x = Ext.String.format("{0} - {1}", val, otherVals);
                        } else if(otherVals.length === 1) {
                           x = Ext.String.format("{0} - {1}", val, otherVals[0]);
                        } else {
                           x = Ext.String.format("{0} - {1}", val, otherVals.join(','));
                        }

                        return x;
                    }
                    return '';
                }
            });

        }
        totalWidth = totalWidth-treeColumnWidth;
        var formattedIDColText = "ID";
        if (groupBy){
            formattedIDColText = '';
        }
        return columns.concat([{
            dataIndex: 'FormattedID',
            text: formattedIDColText,
            menuDisabled: true,
            width: 100,
            sortable: idAndNameSortable,
            renderer: function(v,m,r){
                var tpl = Ext.create('Rally.ui.renderer.template.FormattedIDTemplate');

                return  tpl.apply(r.getData());
            }
        }, {
            text: 'Name',
            dataIndex: 'Name',
            menuDisabled: true,
            width: totalWidth - 100,
            sortable: idAndNameSortable,
            renderer: function (val, metadata, record) {
                metadata.style = 'cursor: pointer;';
                return val;
            }
        },{
            dataIndex: 'Owner',
            text: 'Owner',
            renderer: function(v,m,r){
                return v && v._refObjectName;
            }
        },{
            dataIndex: 'c_PMTQEOwner',
            text: 'QE Owner'
        },{
            xtype: 'tasktodocolumn',
            menuDisabled: true,
            dataIndex: '__taskToDo',
            total: maxToDo,
            text: "Task ToDo (wks)",
            granularityDivider: 40,
            flex: 2,
            listeners: {
                columnresize: this.saveColumnWidths,
                scope: this

            }
        },{
            xtype: 'taskprogresscolumn',
            dataIndex: '__taskEstimate',
            total: maxEstimate,
            menuDisabled: true,
            text: "Task Estimate (wks)",
            granularityDivider: 40,
            flex: 2,
            listeners: {
                columnresize: this.saveColumnWidths,
                scope: this

            }
        },{
            xtype: 'taskprogresscolumn',
            text: "% Task Estimate",
            menuDisabled: true,
            dataIndex: '__taskEstimatePct',
            flex: 2,
            sortable: true,
            listeners: {
                columnresize: this.saveColumnWidths,
                scope: this

            }
        },{
            xtype: 'taskprogresscolumn',
            dataIndex: '__taskCount',
            text: "# Tasks",
            menuDisabled: true,
            total: maxCount,
            flex: 2,
            listeners: {
                columnresize: this.saveColumnWidths,
                scope: this

            }
        },{
            xtype: 'taskprogresscolumn',
            text: "% #Tasks",
            dataIndex: '__taskCountPct',
            sortable: true,
            menuDisabled: true,
            flex: 2,
            listeners: {
                columnresize: this.saveColumnWidths,
                scope: this

            }

        }]);

    },
    saveColumnWidths: function(ct, column, width){
        if (column){
            if (!this.columns){
                this.columns = {};
            }
            this.columns[column.dataIndex] = column;
        }

    },
    //getCalculatedColumns: function(){
    //    var columns = [{
    //        xtype: 'taskremainingcolumn',
    //        text: "Task ToDo (wks)",
    //        granularity: 'week',
    //        field: 'todo'
    //    },{
    //        xtype: 'taskprogresscolumn',
    //        text: "Task Estimate (wks)",
    //        granularity: 'week',
    //        field: 'taskEstimate'
    //    },{
    //        xtype: 'taskprogresscolumn',
    //        text: "% Task Estimate",
    //        field: 'taskEstimate',
    //        percent: true
    //    },{
    //        xtype: 'taskprogresscolumn',
    //        text: "# Tasks",
    //        field: 'taskCount'
    //    },{
    //        xtype: 'taskprogresscolumn',
    //        text: "% #Tasks",
    //        field: 'taskCount',
    //        percent: true
    //
    //    }];
    //    return columns;
    //},
    getFilterPlugin: function(){
        return {
            ptype: 'rallygridboardinlinefiltercontrol',
            inlineFilterButtonConfig: {
                stateful: true,
                stateId: this.getContext().getScopedStateId('ctd-filters'),
                modelNames: this.getModelNames(),
                inlineFilterPanelConfig: {
                    quickFilterPanelConfig: {
                        defaultFields: [
                            'ArtifactSearch',
                            'Owner',
                            'ModelType'
                        ]
                    }
                }
            }
        };
    },
    getFieldPickerPlugin: function(){
        return {
            ptype: 'rallygridboardfieldpicker',
            headerPosition: 'left',
            modelNames: this.getModelNames(),
            stateful: true,
            stateId: this.getContext().getScopedStateId('ctd-columns-1')
        };
    },
    getGridBox: function(){
        return this.down('#grid_box');
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('feature-status-by-task', {
                   name: 'Feature Status by Task'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.remaining-container {
    border-radius: 3px;
    width: 100%;
    height: 100%;
    position: relative;
    background-color: #e6e6e6;
    margin: 0 auto;
}

.progress-bar-container {
    white-space: nowrap;
}

.tslegend {
    width: 14px;
    height: 14px;
    border-radius: 3px;
    text-align: center;
    color: white;
    border-style: solid;
    border-width: 1px;
    display: inline-block;
}

.tslegendtext {
    font-family: 'Lucida Grande', 'Lucida Sans Unicode', Verdana, Arial, Helvetica, sans-serif;
    font-size: '14px'!important;
    color: #274b6d;
    display: inline
}
.tslegendspacer {
    padding: 15px;
    display: inline;
}
.tscenter {
    width: 100%;
    text-align: center;
}

.x-panel .x-grid-body .noborder
{
    border-width: 0px!important;
}

.absolute-cell-inner > .x-grid-cell-inner-treecolumn {
    position: absolute !important;
}
.x-grid-row {
    position: relative !important;
}

.x-column-header-text {
    font-size: 12px!important;
}

.grouped-row .x-grid-cell {
    background-color: #D6D6D6;
    border-bottom-width:1px!important;
    border-bottom-color: #E6E6E6;
}

.included-task .x-grid-cell{
    background-color: #E7E6B6!important;
}

.missing-task-estimates {
    width: 0;
    height: 0;
    border-top: 7px solid #EE1C25;
    border-right: 7px solid transparent;
    border-bottom: 7px solid transparent;
    position: absolute;
    top: 0;
    left: 0;
}

.warning {
    color: #FAD200;
}

.defined{
    color: #FBB990;
}
.inprogress{
    color:#7CAFD7;
}
.completed{
    color:#8DC63F;
}
    </style>

</head>
<body></body>
</html>