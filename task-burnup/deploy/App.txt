<!DOCTYPE html>
<html>
<head>
    <title>Task Burnup</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Tue Jan 24 2017 06:38:12 GMT-0700 (MST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Jan 24 2017 06:38:12 GMT-0700 (MST)";
        var BUILDER = "kcorkan";
        var CHECKSUM = 24992307234;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CArABU.technicalservices.TaskBurnupCalculator', {
    extend: 'Rally.data.lookback.calculator.TimeSeriesCalculator',
    config: {
        completedStates: ['Completed']
    },

    constructor: function (config) {
        this.initConfig(config);
        this.taskOwners = config.taskOwners;
        this.callParent(arguments);
    },

    getDerivedFieldsOnInput: function () {
        var completedStateNames = this.getCompletedStates(),
            taskOwners = this.taskOwners;

        return [
            {
                "as": "Estimated",
                "f": function (snapshot) {
                    if (taskOwners && !Ext.Array.contains(taskOwners,snapshot.Owner)){
                        return 0;
                    }

                    if (snapshot.Estimate) {
                        return snapshot.Estimate/40;
                    }
                    return 0;
                }
            },
            {
                "as": "Completed",
                "f": function (snapshot) {

                    if (taskOwners && !Ext.Array.contains(taskOwners,snapshot.Owner)){
                        return 0;
                    }

                    if (_.contains(completedStateNames, snapshot.State) && snapshot.Estimate) {
                        return snapshot.Estimate/40;
                    }
                    if (!_.contains(completedStateNames, snapshot.State) && snapshot.Estimate && snapshot.ToDo){
                        return (snapshot.Estimate - snapshot.ToDo)/40;
                    }

                    return 0;
                }
            },
            {
                "as": "Remaining",
                "f": function (snapshot) {
                    if (taskOwners && !Ext.Array.contains(taskOwners,snapshot.Owner)){
                        return 0;
                    }

                    if (!_.contains(completedStateNames, snapshot.State) && snapshot.ToDo){
                        return snapshot.ToDo/40;
                    }

                    return 0;
                }
            }
        ];
    },

    getMetrics: function () {
        return [{
                "field": "Completed",
                "as": "Completed",
                "f": "sum",
                "display": "column"
            },{
                "field": "Remaining",
                "as": "Remaining",
                "display": "line",
                "f": "sum"
            },{
            "field": "Estimated",
            "as": "Estimated",
            "display": "line",
            "f": "sum"
        }
        ];
    },
    prepareChartData: function (stores) {

        console.log('store',stores);
        var snapshots = [];
        Ext.Array.each(stores, function(store){
            store.each(function (record) {
                snapshots.push(record.raw);
            });
        });
        return this.runCalculation(snapshots);
    }
});
Ext.define('CArABU.technicalservices.TaskCFDCalculator', {
    extend: 'Rally.data.lookback.calculator.TimeSeriesCalculator',
    config: {
        stateFieldName: 'State',
        stateFieldValues: ['Defined', 'In-Progress', 'Completed'],
        completedStates: ['Completed']
    },

    constructor: function(config) {
        this.initConfig(config);
        this.taskOwners = config.taskOwners;
        this.callParent(arguments);
    },

    getMetrics: function() {

        return [{
            as: "Defined",
            field: "Remaining",
            f: "filteredSum",
            filterField: "State",
            filterValues: ["Defined"],
            display: "area"
        },{
            as: "In-Progress",
            field: "Remaining",
            f: "filteredSum",
            filterField: "State",
            filterValues: ["In-Progress"],
            display: "area"
        },{
            as: "Completed",
            field: "Completed",
            f: "sum",
            display: "area"
        }];

    },
    getDerivedFieldsOnInput: function () {
        var completedStateNames = this.getCompletedStates(),
            taskOwners = this.taskOwners;
        return [
            {
                "as": "Remaining",
                "f": function (snapshot) {
                    if (taskOwners && !Ext.Array.contains(taskOwners,snapshot.Owner)){
                        return 0;
                    }

                    if (snapshot.ToDo){
                        return snapshot.ToDo/40;
                    } else {
                        return snapshot.Estimate/40;
                    }
                    return 0;
                }
            },
            {
                "as": "Completed",
                "f": function (snapshot) {

                    if (taskOwners && !Ext.Array.contains(taskOwners,snapshot.Owner)){
                        return 0;
                    }

                    if (_.contains(completedStateNames, snapshot.State) && snapshot.Estimate) {
                        return snapshot.Estimate/40;
                    }
                    if (!_.contains(completedStateNames, snapshot.State) && snapshot.Estimate && snapshot.ToDo){
                        return (snapshot.Estimate - snapshot.ToDo)/40;
                    }

                    return 0;
                }
            }
        ];
    },
    prepareChartData: function (stores) {

        var snapshots = [];
        Ext.Array.each(stores, function(store){
            store.each(function (record) {
                snapshots.push(record.raw);
            });
        });
        return this.runCalculation(snapshots);
    }
});


Ext.define('CArABU.technicalservices.StandaloneFilter',{
    extend: 'Ext.container.Container',
    alias: 'widget.standalonefilter',
    mixins: [
        'Rally.ui.gridboard.plugin.GridBoardControlShowable'
    ],

    layout: {
        type: 'auto'
    },

    items: [
        {
            itemId: 'header',
            xtype: 'rallyleftright',
            // padding: '4 10',
          //  overflowX: 'hidden',
            items: [
                {
                    itemId: 'left',
                    cls: 'rly-left',
                    flex: 1
                },
                {
                    itemId: 'right',
                    cls: 'rly-left',
                    flex: 1
                },
                {
                    itemId: 'rightright',
                    cls: 'rly-left',
                    flex: 1
                }
            ],
            cls: 'rui-leftright'
        }
    ],


    initComponent: function(){

        this.plugins = [{
            ptype: 'rallygridboardinlinefiltercontrol',
            headerPosition: 'right',
            inlineFilterButtonConfig: {
                modelNames: ['PortfolioItem/Feature'],
                margin: 5,
                //text: 'Filter Features',
                //cls: 'secondary',
                //iconCls: '',
                //width: 100,
                inlineFilterPanelConfig: {
                    collapsed: false,
                    quickFilterPanelConfig: {
                        fieldNames: ['Owner', 'Milestones']
                    }
                }
            }
        }];

        this.callParent(arguments);


    },
    getHeader: function(){
        return this.down('#header');
    },
    getLeft: function(){
        return this.down('#left');
    },
    getRight: function(){
        return this.down('#rightright'); //this.down('#right');
    },
    getToggleState: function(){
        return 'grid';
    },
    getContext: function(){
        return this.context;
    },
    getCustomFilter: function(){
        if (this.customFilter && this.customFilter.length > 0){
            return this.customFilter[0];
        }
        return null;
    },
    applyCustomFilter: function(filterObj){
        // console.log('applyCustomFilter', filterObj);
        this.customFilter = filterObj && filterObj.filters;
    }
});

Ext.override(Rally.ui.combobox.UserComboBox, {

    applyState: function (state) {

        this.store.on('load', function () {
            this.setValue(state.value);
            this.saveState();
        }, this, {single: true});

        if (state.value && this.value != state.value) {
            if (this.store) {
                this.store.addFilter([{
                    property: 'ObjectID',
                    value: state.value
                }]);
                this.refreshStore();
            }
        }
    },

    beforeQuery: function(queryPlan) {
        var queryString = queryPlan.query,
            idFilter = Rally.data.wsapi.Filter.or([
                {
                    property: 'UserName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'DisplayName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'FirstName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'LastName',
                    operator: 'contains',
                    value: queryString
                },
                {
                    property: 'EmailAddress',
                    operator: 'contains',
                    value: queryString
                }
            ]);
        queryPlan.query = idFilter.toString();

        return this.callSuper(arguments);
    }
});
Ext.define('CArABU.technicalservices.Utility',{
    singleton: true,
    MAX_CHUNK_SIZE: 25,

    managerObjectIDReportsHash: {},

    fetchManagerTree: function(managerIDField, employeeIDField){
        var deferred = Ext.create('Deft.Deferred');
        this.fetchWsapiRecords({
            model: 'User',
            fetch: ['ObjectID',managerIDField, employeeIDField],
            filters: [{
                property: employeeIDField,
                operator: '!=',
                value: ""
            }]
        }).then({
            success: function(records){
                CArABU.technicalservices.Utility.managerObjectIDReportsHash = CArABU.technicalservices.Utility.buildManagerTree(records, managerIDField, employeeIDField);
                deferred.resolve();
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        return deferred;
    },
    getReports: function(userRecord){
        var objectID = userRecord.get('ObjectID'),
            hash = CArABU.technicalservices.Utility.managerObjectIDReportsHash;

        var getSubReports = function(id){
            var subReports = hash[id] || [];
            Ext.Array.each(subReports, function(id){
                subReports = subReports.concat(getSubReports(id));
            });
            return subReports;
        };

        var reports = getSubReports(objectID);
        return reports;
    },
    buildManagerTree: function(userRecords, managerIDField, employeeIDField){
        var managerIDReportObjectIDMap = {},
            employeeIDObjectIDMap = {};

        Ext.Array.each(userRecords, function(u){
            var manager= u.get(managerIDField),
                employeeID = u.get(employeeIDField);
            employeeIDObjectIDMap[employeeID] = u.get('ObjectID');
            if (!managerIDReportObjectIDMap[manager]){
                managerIDReportObjectIDMap[manager] = [];
            }
            managerIDReportObjectIDMap[manager].push(u.get('ObjectID'));
        });

        var reportsHash = {};
        Ext.Object.each(managerIDReportObjectIDMap, function(managerID, reports){
            var objId = employeeIDObjectIDMap[managerID];
            reportsHash[objId] = reports;
        });

        return reportsHash;
    },
    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        config.limit = 'Infinity';

        Ext.create('Rally.data.wsapi.Store',config).load({
            callback: function(records, operation, success){
                if (operation.wasSuccessful()){
                    deferred.resolve(records);
                } else {
                    var msg = Ext.String.format("Error fetching features: {0}", operation.error.errors.join(','));
                    deferred.reject(msg);
                }
            }
        });
        return deferred;
    },
    fetchChunkedWsapiRecords: function(config,objectIDs){
        var deferred = Ext.create('Deft.Deferred');
        var promises = [],
            filterOids = false ;

        if (config.filters){

            promises.push(CArABU.technicalservices.Utility.fetchWsapiRecords(config));
            filterOids = true
        } else {
            for (var i=0; i < objectIDs.length; i = i + CArABU.technicalservices.Utility.MAX_CHUNK_SIZE){
                var chunk = Ext.Array.slice(objectIDs, i, i + CArABU.technicalservices.Utility.MAX_CHUNK_SIZE);
                promises.push(CArABU.technicalservices.Utility.fetchWsapiChunk(chunk, config));
            }
        }
        Deft.Promise.all(promises).then({
            success: function(results){
                var records = _.flatten(results);
                if (filterOids){
                    //We had a filter for the features and now we want ot filter out the features that don't meet our criteria
                    records = _.filter(records, function(r){
                        return Ext.Array.contains(objectIDs, r.get('ObjectID'));
                    });
                }
                deferred.resolve(records);
            },
            failure: function(msg){
                deferred.reject(msg);
            },
            scope: this
        });
        return deferred;
    },
    fetchWsapiChunk: function(chunk, config){
        var filters = _.map(chunk, function(c){ return {property: 'ObjectID', value: c}; });
        filters = Rally.data.wsapi.Filter.or(filters);
        config.filters = filters;
        return CArABU.technicalservices.Utility.fetchWsapiRecords(config);
    }

});

Ext.define("task-burnup", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    items: [
        {xtype:'container',itemId:'selector_box', layout: 'hbox'},
        {xtype:'container',itemId:'filter_box', layout: 'hbox'},
        {xtype: 'container', itemId: 'chart_header_box', layout: 'hbox'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "task-burnup"
    },
    config: {
        defaultSettings: {
            portfolioItemType: "PortfolioItem/Feature",
            employeeIDField: 'c_EmployeeId',
            managerEmployeeIDField: 'c_ManagerEmployeeId'
        }
    },
    margin: 5,
    showCFD: false,

    cfdToolTipText: "<p>Task Cumulative Flow</p><p>The task cumulative flow chart shows the flow of Task states over time.</p><p>Completed is the sum of the estimate of all tasks in the completed state in addition to the Estimate - ToDo for tasks in the In-Progress or Defined state (in weeks).</p><p>In-Progress is the sum of the ToDo (or Estimate if there is no To Do) for the tasks In Progress.</p><p>Defined is the sum of the To Do (or Estimate if there is no To Do) for tasks in the Defined state.</p>",

    burnupToolTipText: "<p>Task Burnup</p><p>The task burnup chart shows the sum of the completed, remaining and estimated tasks (in weeks) over time for the selected criteria.</p><p>Completed is the sum of the estimate of all tasks in the completed state in addition to the Estimate - ToDo for tasks in the In-Progress or Defined state.</p><p>Estimated is the sum of the Task Estimates.</p><p>Remaining is the sum of the Task To Do (if the task is not in the Completed state).</p>",
                        
    launch: function() {
        this.setLoading('Initializing Users...');
        CArABU.technicalservices.Utility.fetchManagerTree(this.getManagerIDField(), this.getEmployeeIDField()).then({
            success: function(){
                this.initializeApp();
            },
            failure: this.showErrorNotification,
            scope: this
        }).always(function(){ this.setLoading(false); },this);
    },
    getPortfolioItemType: function(){
        return this.getSetting('portfolioItemType');
    },
    getManagerIDField: function(){
        return this.getSetting('managerEmployeeIDField');
    },
    getEmployeeIDField: function(){
        return this.getSetting('employeeIDField');
    },
    initializeApp: function(){
        this.logger.log('initializeApp');
        this.addComponents();
    },
    getSelectorBox: function(){
        return this.down('#selector_box');
    },
    getDisplayBox: function(){
        return this.down('#display_box');
    },
    getChartHeader: function(){
        return this.down('#chart_header_box');
    },
    addComponents: function(){
        this.logger.log('addComponents');

        this.getSelectorBox().add({
            fieldLabel: 'Story Release',
            xtype: 'rallyreleasecombobox',
            itemId: 'cbRelease',
            labelAlign: 'right',
            labelWidth: 80,
            margin: this.margin
        });

        this.getSelectorBox().add({
                fieldLabel: 'Feature Milestone',
                xtype: 'rallymilestonepicker',
                itemId: 'featureMilestone',
                labelAlign: 'right',
                labelWidth: 100,
                width: 300,
                margin: this.margin,
                listeners: {
                    select: function(pk){
                        pk.syncSelectionText();
                    },
                    deselect: function(pk,value,values){
                        pk.syncSelectionText();
                        if (!values || values.length === 0){
                            pk.setValueText("");
                        }
                    }
                }
        });

        this.getSelectorBox().add({
            fieldLabel: 'Story Milestone',
            xtype: 'rallymilestonepicker',
            itemId: 'storyMilestone',
            labelAlign: 'right',
            margin: this.margin,
            labelWidth: 100,
            width: 300,
            listeners: {
                select: function(pk){
                    pk.syncSelectionText();
                },
                deselect: function(pk,value,values){
                    pk.syncSelectionText();
                    if (!values || values.length === 0){
                        pk.setValueText("");
                    }

                }
            }
        });
        var filterBox = this.down('#filter_box').add({
            xtype: 'standalonefilter',
            context: this.getContext(),
            flex: 1
        });

        filterBox.getLeft().add({
            xtype: 'rallyusercombobox',
            margin: this.margin,
            fieldLabel: 'Manager',
            itemId: 'usrManager',
            labelAlign: 'right',
            labelWidth: 100,
            width: 300,
            stateful: true,
            allowNoEntry: true,
            stateId: this.getContext().getScopedStateId('userManager'),
            displayField: "DisplayName",
            valueField: "ObjectID",
            value: null
        });

        var bt = filterBox.getRight().add({
            xtype: 'rallybutton',
            text: 'Update',
            margin: '5 50 5 50',
            width: 100
        });

        bt.on('click', this.getAncestors, this);

        this.getChartHeader().add({
            xtype: 'container',
            flex: 1
        });

        this.getChartHeader().add({
            xtype: 'rallybutton',
            iconCls: 'icon-bars',
            itemId: 'btn-burnup',
            cls: 'primary rly-small',
            pressedCls: 'primary rly-small',
            enableToggle: true,
            pressed: true,
            scope: this,
            toolTipText: this.burnupToolTipText,
            listeners: {
                toggle: this.toggleDetail,
                scope: this
            }
        });

       this.getChartHeader().add({
            xtype: 'rallybutton',
            iconCls: 'icon-graph',
            itemId: 'btn-cfd',
            cls: 'secondary rly-small',
            pressedCls: 'primary rly-small',
            enableToggle: true,
            scope: this,
            pressed: false,
           toolTipText: this.cfdToolTipText,
           listeners: {
                toggle: this.toggleDetail,
                scope: this
            }
        });

    },
    toggleDetail: function(btn, state){
        this.logger.log('_toggleDetail', btn.itemId, state);
        if (state){
            btn.removeCls('secondary');
            btn.addCls('primary');
        } else {
            btn.removeCls('primary');
            btn.addCls('secondary');
        }

        this.getAncestors();

    },
    getShowCFD: function(){
        return this.down('#btn-cfd').pressed;
    },
    getShowBurnup: function(){
        return this.down('#btn-burnup').pressed;
    },
    getFeatureMilestones: function(){
        return this.down('#featureMilestone').getValue() || [];
    },
    getStoryMilestones: function(){
        return this.down('#storyMilestone').getValue() || [];
    },
    getReleaseFilter: function(){
        return this.down('#cbRelease').getQueryFromSelected();
    },
    getFeatureFilters: function() {
        return this.down('standalonefilter').getCustomFilter();
    },
    getStoryFiltersFromFeatureFilters: function(featureFilters){
        if (!featureFilters){
            return [];
        }

        var filterString = featureFilters.toString(),
            featureName = this.getFeatureName();

        var filters = filterString.match(/\([^()]+\)/g);
        Ext.Array.each(filters, function(segment){
            var newSegment= segment.replace("(","(" + featureName + ".");
            filterString = filterString.replace(segment, newSegment);
        });
        this.logger.log('getStoryFiltersFromFeatureFilters', filterString);
        return Rally.data.wsapi.Filter.fromQueryString(filterString);
    },
    getFeatureName: function(){
        return this.getPortfolioItemType().replace('PortfolioItem/','');
    },
    getTaskOwners: function(){
        var manager = this.down('#usrManager') && this.down('#usrManager').getRecord();

        this.logger.log('getTaskOwners', manager);
        var users = [];
        if (manager){
            this.logger.log('getTaskOwners including manager reports', manager);
            var reports = CArABU.technicalservices.Utility.getReports(manager);
            users = users.concat(reports);
        }
        if (users.length > 0){
            return users;
        }
        return null;
    },
    getAncestors: function(){

        var featureMilestones = this.getFeatureMilestones(),
            storyMilestones = this.getStoryMilestones(),
            featureFilters = this.getFeatureFilters(),
            featureName = this.getFeatureName(),
            releaseFilter = this.getReleaseFilter();

        this.logger.log('getAncestors', featureMilestones, storyMilestones, featureFilters);


        var model = 'HierarchicalRequirement',
            filters = releaseFilter;

        if (storyMilestones.length > 0) {
            var storyFilters = Ext.Array.map(storyMilestones, function (m) {
                return {
                    property: 'Milestones',
                    value: m.get('_ref')
                };
            });
            storyFilters = Rally.data.wsapi.Filter.or(storyFilters);
            filters = filters.and(storyFilters);
        }

        if (featureMilestones.length > 0){
                var featureParentFilters = Ext.Array.map(featureMilestones, function(m){
                    return {
                        property: featureName + '.Milestones',
                        value: m.get('_ref')
                    };
                });
                featureParentFilters = Rally.data.wsapi.Filter.or(featureParentFilters);
                filters = filters.and(featureParentFilters);
        }

        if (featureFilters){
            this.logger.log('featureFilters', featureFilters, featureFilters.toString());
            filters = filters.and(this.getStoryFiltersFromFeatureFilters(featureFilters));
        }



        this.logger.log('getAncestors',filters.toString());

        //    model = 'HierarchicalRequirement';
        //    filters = storyFilters;
        //
        //} else if (featureMilestones.length > 0){
        //    filters = Ext.Array.map(featureMilestones, function(m){
        //        return {
        //            property: 'Milestones',
        //            value: m.get('_ref')
        //        };
        //    });
        //    filters = Rally.data.wsapi.Filter.or(filters);
        //
        //    if (featureFilters){
        //        filters = filters.and(featureFilters);
        //    }
        //
        //} else if (featureFilters){
        //    filters = featureFilters;
        //}

        Ext.create('Rally.data.wsapi.Store',{
            model: model,
            fetch: ['ObjectID'],
            filters: filters,
            limit: 'Infinity'
        }).load({
            callback: function(records, operation){
                if (operation.wasSuccessful()){
                    this.updateView(records);
                } else {
                    var msg = operation.error.errors.join(',');
                    this.showErrorNotification(msg);
                }
            },
            scope: this
        });

    },
    showErrorNotification: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    showNoData: function(){
        this.getDisplayBox().add({
            xtype: 'container',
            html: '<div class="no-data-container"><div class="secondary-message">No Data was found for the currently selected filters and project.</div></div>'
        });
    },
    updateView: function(ancestors){

        var oids = Ext.Array.map(ancestors, function(f){ return f.get('ObjectID');});
        this.logger.log('updateView', oids);

        this.getDisplayBox().removeAll();

        if (oids.length === 0){
            this.showNoData();
            return;
        }

        var taskOwners = this.getTaskOwners();

        if (this.getShowBurnup()){
            this.getDisplayBox().add({
                xtype: 'rallychart',
                chartColors:  ['#6ab17d', '#E5D038', '#E57E3A'],  //Estimate, completed, Remaining
                storeType: 'Rally.data.lookback.SnapshotStore',
                storeConfig: this.getStoreConfig(oids),
                calculatorType: 'CArABU.technicalservices.TaskBurnupCalculator',
                calculatorConfig: {
                    taskOwners: taskOwners
                },
                chartConfig: this.getChartConfig()
            });
        }

        if (this.getShowCFD()) {
            this.getDisplayBox().add({
                xtype: 'rallychart',
                chartColors:  ['#E57E3A', '#E5D038', '#6ab17d'],
                storeType: 'Rally.data.lookback.SnapshotStore',
                storeConfig: this.getStoreConfig(oids),
                calculatorType: 'CArABU.technicalservices.TaskCFDCalculator',
                calculatorConfig: {
                    taskOwners: taskOwners
                },
                chartConfig: this.getCFDConfig() //this.getChartConfig()
            });


        }
    },

    getStoreConfig: function(featureOids) {
        var MAX_SIZE = 25,
            configs = [];

        for (var i=0; i < featureOids.length; i = i + MAX_SIZE){
            var chunk = Ext.Array.slice(featureOids, i, i + MAX_SIZE);
            configs.push({
                find: {
                    _ItemHierarchy: {$in: chunk},
                    _TypeHierarchy: 'Task'
                },
                fetch: ['State', 'ToDo','Estimate','Owner'],
                hydrate: ['State'],
                sort: {
                    _ValidFrom: 1
                },
                context: this.getContext().getDataContext(),
                limit: Infinity,
                removeUnauthorizedSnapshots: true 
            });
        }
        return configs;
    },
    getCFDConfig: function(){
        return {
            chart: {
                zoomType: 'xy'
            },
            title: {
                text: 'Task Cumulative Flow'
            },
            xAxis: {
                tickmarkPlacement: 'on',
                tickInterval: 20,
                title: {
                    text: 'Date'
                }
            },
            yAxis: [
                {
                    title: {
                        text: 'Weeks'
                    }
                }
            ],
            plotOptions: {
                series: {
                    marker: {
                        enabled: false
                    }
                },
                area: {
                    stacking: 'normal'
                }
            },
            tooltip: {
                formatter: function() {
                    return '' + this.x + '<br />' + this.series.name + ': ' + Math.round(this.y);
                }
            }
        };
    },
    getChartConfig: function() {
        return {
            chart: {
                defaultSeriesType: 'area',
                zoomType: 'xy'
            },
            title: {
                text: 'Task Burnup'
            },
            xAxis: {
                categories: [],
                tickmarkPlacement: 'on',
                tickInterval: 20,
                title: {
                    text: 'Date',
                    margin: 10
                }
            },
            yAxis: [
                {
                    title: {
                        text: 'Weeks'
                    }
                }
            ],
            tooltip: {
                formatter: function() {
                    return '' + this.x + '<br />' + this.series.name + ': ' + Math.round(this.y);
                }
            },
            plotOptions: {
                series: {
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true
                            }
                        }
                    },
                    groupPadding: 0.01
                },
                column: {
                    stacking: null,
                    shadow: false
                }
            }
        };
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        // Ext.apply(this, settings);
        this.launch();
    }
});

            
               Rally.launchApp('task-burnup', {
                   name: 'Task Burnup'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

/*.color {*/
/*// color: #E57E3A', '#3a874f', '#B2E3B6', '#3A874F'],*/

/*}*/
    </style>

</head>
<body></body>
</html>